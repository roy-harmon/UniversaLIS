using Swashbuckle.AspNetCore.Annotations;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace UniversaLIS.Models
{
     [SwaggerSchema(Required = new[] { "Description" }, Description = "The test order record defines the attributes of a particular request for a clinical instrument’s services and contains all specimen information. An order record will be generated by the information system to request a given test, battery, or set of tests.")]
     public class OrderBase
     {
          private protected int orderID;
          private List<Comment> comments = new();
          private OrderedDictionary elements = new();
          private List<Result> results = new();
          [JsonIgnore, NotMapped]
          public OrderedDictionary Elements { get => elements; set => elements = value; }

          [JsonPropertyOrder(0), SwaggerSchema("The unique identifier assigned to the order record in the UniversaLIS internal database.", ReadOnly = true)]
          [Key]
          public int OrderID { get => orderID; set => orderID = value; }

          [JsonPropertyOrder(1), SwaggerSchema("A unique identifier for the specimen assigned by the information system and returned by the instrument.")]
          public string? SpecimenID { get => (string?)Elements["SpecimenID"]; set => Elements["SpecimenID"] = value; }

          [JsonPropertyOrder(2), SwaggerSchema("A unique identifier assigned by the instrument, if different from the information system identifier, and returned with results for use in referring to any results.")]
          public string? InstrSpecID { get => (string?)Elements["InstrSpecID"]; set => Elements["InstrSpecID"] = value; }

          [JsonPropertyOrder(3), SwaggerSchema("The test ID field is used to identify a test or battery name. The four parts defined by the " +
               "specification are the universal test identifier, the test name, the test identifier type, and the manufacturer-defined test code, separated by a delimiter (^). " +
               "Some manufacturers only utilize the last part; the resulting UniversalTestID string consists of '^^^' followed by the test code due to the unused parts of the field.")]
          public string UniversalTestID { get => (string)(Elements["UniversalTestID"] ?? "^^^"); set => Elements["UniversalTestID"] = value; }

          [JsonPropertyOrder(4), SwaggerSchema("Test priority code. <br>S = stat<br>A = as soon as possible<br>R = routine<br>C = callback<br>P = preoperative")]
          public string? Priority { get => (string?)Elements["Priority"]; set => Elements["Priority"] = value; }

          [JsonPropertyOrder(5), SwaggerSchema("The date and time the test order should be considered ordered. Usually this will be the date and time the order was recorded. " +
               "This is the date and time against which the priorities should be considered.", Format ="yyyyMMddhhmmss")]
          public string? OrderDate { get => (string?)Elements["OrderDate"]; set => Elements["OrderDate"] = value; }

          [JsonPropertyOrder(6), SwaggerSchema("The actual time the specimen was collected or obtained.", Format = "yyyyMMddhhmmss")]
          public string? CollectionDate { get => (string?)Elements["CollectionDate"]; set => Elements["CollectionDate"] = value; }

          [JsonPropertyOrder(7), SwaggerSchema("The end date and time of a timed specimen collection, such as 24-hour urine collection.", Format = "yyyyMMddhhmmss")]
          public string? CollectionEndTime { get => (string?)Elements["CollectionEndTime"]; set => Elements["CollectionEndTime"] = value; }

          [JsonPropertyOrder(8), SwaggerSchema("The total volume of specimens such as urine or other bulk collections when only an aliquot is sent to the instrument.")]
          public string? CollectionVolume { get => (string?)Elements["CollectionVolume"]; set => Elements["CollectionVolume"] = value; }

          [JsonPropertyOrder(9), SwaggerSchema("The person and facility which collected the specimen.")]
          public string? CollectorID { get => (string?)Elements["CollectorID"]; set => Elements["CollectorID"] = value; }

          [JsonPropertyOrder(10), SwaggerSchema("The action to be taken. <br>C = cancel request for the battery or tests named<br>A = add the requested tests or batteries " +
               "to the existing specimen with the patient and specimen identifiers and date/time given in this record<br>N = new requests accompanying a new specimen<br>P = pending specimen<br>" +
               "L = reserved<br>X = specimen or test already in process<br>Q = treat specimen as a Q/C test specimen")]
          public string? ActionCode { get => (string?)Elements["ActionCode"]; set => Elements["ActionCode"] = value; }

          [JsonPropertyOrder(11), SwaggerSchema("Either a test or a code indicating any special hazard associated with the specimen, for example, a hepatitis patient or suspected anthrax.")]
          public string? DangerCode { get => (string?)Elements["DangerCode"]; set => Elements["DangerCode"] = value; }

          [JsonPropertyOrder(12), SwaggerSchema("Additional information about the specimen. Used to report information such as amount of inspired O2 for blood gases, " +
               "point in menstrual cycle for cervical pap tests, or other conditions that influence test interpretations.")]
          public string? RelevantClinicInfo { get => (string?)Elements["RelevantClinicInfo"]; set => Elements["RelevantClinicInfo"] = value; }

          [JsonPropertyOrder(13), SwaggerSchema("The actual log-in time recorded in the laboratory.", Format = "yyyyMMddhhmmss")]
          public string? SpecimenRecvd { get => (string?)Elements["SpecimenRecvd"]; set => Elements["SpecimenRecvd"] = value; }

          [JsonPropertyOrder(14), SwaggerSchema("Specimen type (blood, urine, etc.) followed by specimen source body site, separated by a delimiter (^) character.")]
          public string? SpecimenDescriptor { get => (string?)Elements["SpecimenDescriptor"]; set => Elements["SpecimenDescriptor"] = value; }

          [JsonPropertyOrder(15), SwaggerSchema("The name of the ordering physician.")]
          public string? OrderingPhysician { get => (string?)Elements["OrderingPhysician"]; set => Elements["OrderingPhysician"] = value; }

          [JsonPropertyOrder(16), SwaggerSchema("The telephone number of the requesting physician, to be used in responding to callback orders and for critically abnormal results.")]
          public string? PhysicianTelNo { get => (string?)Elements["PhysicianTelNo"]; set => Elements["PhysicianTelNo"] = value; }

          [JsonPropertyOrder(17), SwaggerSchema("User Field Number 1")]
          public string? UF1 { get => (string?)Elements["UF1"]; set => Elements["UF1"] = value; }

          [JsonPropertyOrder(18), SwaggerSchema("User Field Number 2")]
          public string? UF2 { get => (string?)Elements["UF2"]; set => Elements["UF2"] = value; }

          [JsonPropertyOrder(19), SwaggerSchema("This is an optional field definable for any use by the laboratory.")]
          public string? LF1 { get => (string?)Elements["LF1"]; set => Elements["LF1"] = value; }

          [JsonPropertyOrder(20), SwaggerSchema("This is an optional field definable for any use by the laboratory.")]
          public string? LF2 { get => (string?)Elements["LF2"]; set => Elements["LF2"] = value; }

          [JsonPropertyOrder(21), SwaggerSchema("When the information system queries the instrument for untransmitted results, " +
               "the information in this field may be used to control processing on the communications link. Usually, the ordering service would only " +
               "want those results for which the reporting date and time is greater than the date and time the inquiring system last received results.")]
          public string? LastReported { get => (string?)Elements["LastReported"]; set => Elements["LastReported"] = value; }

          [JsonPropertyOrder(22), SwaggerSchema("The billing charge or accounting reference by this instrument for tests performed.")]
          public string? BillRef { get => (string?)Elements["BillRef"]; set => Elements["BillRef"] = value; }

          [JsonPropertyOrder(23), SwaggerSchema("The section of the instrument where the test was performed. In the case where multiple instruments " +
               "are on a single line or a test was moved from one instrument to another, this field will show which instrument or section of an instrument performed the test.")]
          public string? InstrSectionID { get => (string?)Elements["InstrSectionID"]; set => Elements["InstrSectionID"] = value; }

          [JsonPropertyOrder(24), SwaggerSchema("O = order record; user asking that analysis be performed<br>C = correction of previously transmitted results<br>P = preliminary results<br>F = final results<br>X = order cannot be done, order cancelled<br>I = in instrument pending<br>Y = no order on record for this test (in response to query)<br>Z = no record of this patient (in response to query)<br>Q = response to query (this record is a response to a request-information query)")]
          public string? ReportType { get => (string?)Elements["ReportType"]; set => Elements["ReportType"] = value; }

          [JsonPropertyOrder(25), SwaggerSchema("This field is unused but reserved for future expansion.")]
          public string? Reserved { get => (string?)Elements["Reserved"]; set => Elements["Reserved"] = value; }

          [JsonPropertyOrder(26), SwaggerSchema("The location of specimen collection if different from the patient location.")]
          public string? SpecCollectLocation { get => (string?)Elements["SpecCollectLocation"]; set => Elements["SpecCollectLocation"] = value; }

          [JsonPropertyOrder(27), SwaggerSchema("This field is used for epidemiological reporting purposes and will show whether the organism identified is " +
               "the result of a nosocomial (hospital-acquired) infection.")]
          public string? NosInfFlag { get => (string?)Elements["NosInfFlag"]; set => Elements["NosInfFlag"] = value; }

          [JsonPropertyOrder(28), SwaggerSchema("In cases where an individual service may apply to the specimen collected, and the service is different from the patient " +
               "record service, this field may be used to define the specific service responsible for such collection.")]
          public string? SpecService { get => (string?)Elements["SpecService"]; set => Elements["SpecService"] = value; }

          [JsonPropertyOrder(29), SwaggerSchema("In cases where the specimen may have been collected in an institution, and the institution is different from " +
               "the patient record institution, this field may be used to record the institution of specimen collection.")]
          public string? SpecInstitution { get => (string?)Elements["SpecInstitution"]; set => Elements["SpecInstitution"] = value; }

          public virtual List<Result> Results { get => results; set => results = value; }

          // TODO: Add support for comment records.
          [JsonIgnore, NotMapped]
          internal List<Comment> Comments { get => comments; set => comments = value; }

          public string GetOrderMessage()
          {
               // Anything missing should be added as an empty string.
               string[] elementArray = { "FrameNumber", "Sequence#", "SpecimenID", "InstrSpecID", "UniversalTestID", "Priority", "OrderDate", "CollectionDate", "CollectionEndTime", "CollectionVolume", "CollectorID", "ActionCode", "DangerCode", "RelevantClinicInfo", "SpecimenRecvd", "SpecimenDescriptor", "OrderingPhysician", "PhysicianTelNo", "UF1", "UF2", "LF1", "LF2", "LastReported", "BillRef", "InstrSectionID", "ReportType", "Reserved", "SpecCollectLocation", "NosInfFlag", "SpecService", "SpecInstitution" };
               foreach (var item in elementArray)
               {
                    if (!Elements.Contains(item))
                    {
                         Elements.Add(item, "");
                    }
               }
               string output = Constants.STX + $"{Elements["FrameNumber"]}".Trim('O') + "O|";
               // Concatenate the Dictionary values and return the string.
               output += Elements["Sequence#"] + "|";
               output += Elements["SpecimenID"] + "|";
               output += Elements["InstrSpecID"] + "|";
               output += Elements["UniversalTestID"] + "|";
               output += Elements["Priority"] + "|";
               output += Elements["OrderDate"] + "|";
               output += Elements["CollectionDate"] + "|";
               output += Elements["CollectionEndTime"] + "|";
               output += Elements["CollectionVolume"] + "|";
               output += Elements["CollectorID"] + "|";
               output += Elements["ActionCode"] + "|";
               output += Elements["DangerCode"] + "|";
               output += Elements["RelevantClinicInfo"] + "|";
               output += Elements["SpecimenRecvd"] + "|";
               output += Elements["SpecimenDescriptor"] + "|";
               output += Elements["OrderingPhysician"] + "|";
               output += Elements["PhysicianTelNo"] + "|";
               output += Elements["UF1"] + "|";
               output += Elements["UF2"] + "|";
               output += Elements["LF1"] + "|";
               output += Elements["LF2"] + "|";
               output += Elements["LastReported"] + "|";
               output += Elements["BillRef"] + "|";
               output += Elements["InstrSectionID"] + "|";
               output += Elements["ReportType"] + "|";
               output += Elements["Reserved"] + "|";
               output += Elements["SpecCollectLocation"] + "|";
               output += Elements["NosInfFlag"] + "|";
               output += Elements["SpecService"] + "|";
               output += Elements["SpecInstitution"] + Constants.CR + Constants.ETX;
               return output;
          }

          public void SetOrderMessage(string value)
          {
               string[] inArray = value.Split('|');
               if (inArray.Length < 31)
               {
                    // Invalid number of elements.
                    throw new Exception("Invalid number of elements in order record string.");
               }
               Elements["FrameNumber"] = NullifyEmptyString(inArray[0]);
               Elements["Sequence#"] = NullifyEmptyString(inArray[1]);
               Elements["SpecimenID"] = NullifyEmptyString(inArray[2]);
               Elements["InstrSpecID"] = NullifyEmptyString(inArray[3]);
               Elements["UniversalTestID"] = NullifyEmptyString(inArray[4]);
               Elements["Priority"] = NullifyEmptyString(inArray[5]);
               Elements["OrderDate"] = NullifyEmptyString(inArray[6]);
               Elements["CollectionDate"] = NullifyEmptyString(inArray[7]);
               Elements["CollectionEndTime"] = NullifyEmptyString(inArray[8]);
               Elements["CollectionVolume"] = NullifyEmptyString(inArray[9]);
               Elements["CollectorID"] = NullifyEmptyString(inArray[10]);
               Elements["ActionCode"] = NullifyEmptyString(inArray[11]);
               Elements["DangerCode"] = NullifyEmptyString(inArray[12]);
               Elements["RelevantClinicInfo"] = NullifyEmptyString(inArray[13]);
               Elements["SpecimenRecvd"] = NullifyEmptyString(inArray[14]);
               Elements["SpecimenDescriptor"] = NullifyEmptyString(inArray[15]);
               Elements["OrderingPhysician"] = NullifyEmptyString(inArray[16]);
               Elements["PhysicianTelNo"] = NullifyEmptyString(inArray[17]);
               Elements["UF1"] = NullifyEmptyString(inArray[18]);
               Elements["UF2"] = NullifyEmptyString(inArray[19]);
               Elements["LF1"] = NullifyEmptyString(inArray[20]);
               Elements["LF2"] = NullifyEmptyString(inArray[21]);
               Elements["LastReported"] = NullifyEmptyString(inArray[22]);
               Elements["BillRef"] = NullifyEmptyString(inArray[23]);
               Elements["InstrSectionID"] = NullifyEmptyString(inArray[24]);
               Elements["ReportType"] = NullifyEmptyString(inArray[25]);
               Elements["Reserved"] = NullifyEmptyString(inArray[26]);
               Elements["SpecCollectLocation"] = NullifyEmptyString(inArray[27]);
               Elements["NosInfFlag"] = NullifyEmptyString(inArray[28]);
               Elements["SpecService"] = NullifyEmptyString(inArray[29]);
               Elements["SpecInstitution"] = NullifyEmptyString(inArray[30]);
          }

          private static string? NullifyEmptyString(string? input)
          {
               if (input == "") {
                    return null;
               }
               return input;
          }
     }
}